#include <bits/stdc++.h> 

int solve(vector<vector<int>>& arr, int i, int j, int m, int n, vector<vector<int>>& dp){
	if(i == m || j == n){
		return 0;
	}
	if(arr[i][j] == 1){
		return 1;
	}
	if(dp[i][j] != -1){
		return dp[i][j];
	}

	int rightAns = solve(arr,i,j+1,m,n,dp);
	int downAns = solve(arr,i+1,j,m,n,dp);

	return dp[i][j] = rightAns+downAns;

}
int solveTab(int m, int n){
	vector<vector<int>> dp(m, vector<int>(n, 0));

	for(int i = m-1; i >= 0; i--){
		for(int j = n-1; j >= 0; j--){
			if(i == m - 1 && j == n - 1){
				dp[i][j] = 1;
			}
			else{
				int rightAns = 0, downAns = 0;
				if(j + 1 < n) rightAns = dp[i][j+1];
				if(i + 1 < m) downAns = dp[i+1][j];
				dp[i][j] = rightAns+downAns;
			}
		}
	}
	return dp[0][0];
}

int solveSO(int m, int n){
	vector<int> temp(n, 1);

	for(int i = m-2; i >= 0; i--){
		vector<int> temp2(n, 0);
		for(int j = n-1; j >= 0; j--){
			if(j == n - 1){
				temp2[j] = 1;
			}
			else{
				int rightAns = temp2[j+1];
				int downAns = temp[j];
				temp2[j] = rightAns+downAns;
			}
		}
	    temp = temp2;
	}
	return temp[0];
}

int uniquePaths(int m, int n) {
	// matrix
	vector<vector<int>> arr(m, vector<int>(n, 0));
	arr[m-1][n-1] = 1;
	int i = 0, j = 0;

	//vector<vector<int>> dp(m, vector<int>(n, -1));
	int ans = solveSO(m,n);
	return ans;
}
